diff --git a/node_modules/libp2p/dist/src/components.js b/node_modules/libp2p/dist/src/components.js
index 86963c0..be78d8e 100644
--- a/node_modules/libp2p/dist/src/components.js
+++ b/node_modules/libp2p/dist/src/components.js
@@ -1,6 +1,7 @@
 import { CodeError, serviceCapabilities, serviceDependencies } from '@libp2p/interface';
 import { isStartable } from '@libp2p/interface';
 import { defaultLogger } from '@libp2p/logger';
+import pDefer from 'p-defer';
 class DefaultComponents {
     components = {};
     _started = false;
@@ -17,11 +18,32 @@ class DefaultComponents {
         return this._started;
     }
     async _invokeStartableMethod(methodName) {
-        await Promise.all(Object.values(this.components)
+
+        let timeoutPromise = pDefer();
+        let timeout = setTimeout(() => {
+            timeoutPromise.reject(new Error(`Timeout waiting for ${methodName} to complete`));
+        }, 10000);
+
+        const connectionManager = this.components["connectionManager"]
+        if (isStartable(connectionManager)) {
+            await connectionManager[methodName]?.();
+        }
+        let promise = Promise.all(Object.values(this.components)
             .filter(obj => isStartable(obj))
             .map(async (startable) => {
-            await startable[methodName]?.();
-        }));
+                await startable[methodName]?.();
+            }));
+        const race = Promise.race([promise, timeoutPromise.promise]);
+        try {
+            await race;
+            timeoutPromise.resolve()
+        }
+        catch (e) {
+            throw e;
+        }
+        finally {
+            clearTimeout(timeout);
+        }
     }
     async beforeStart() {
         await this._invokeStartableMethod('beforeStart');
