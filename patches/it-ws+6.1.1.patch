diff --git a/node_modules/it-ws/dist/src/server.js b/node_modules/it-ws/dist/src/server.js
index 47ee757..48669a1 100644
--- a/node_modules/it-ws/dist/src/server.js
+++ b/node_modules/it-ws/dist/src/server.js
@@ -2,7 +2,7 @@ import { EventEmitter } from 'events';
 import http from 'http';
 import https from 'https';
 import { WebSocketServer as WSServer } from 'ws';
-import duplex, {} from './duplex.js';
+import duplex, { } from './duplex.js';
 class Server extends EventEmitter {
     server;
     wsServer;
@@ -40,6 +40,12 @@ class Server extends EventEmitter {
     }
     onWsServerConnection(socket, req) {
         const addr = this.wsServer.address();
+
+        if (!addr) {
+            this.emit('error', new Error('Server is not listening'))
+            return
+        }
+
         if (typeof addr === 'string') {
             this.emit('error', new Error('Cannot listen on unix sockets'));
             return;
diff --git a/node_modules/it-ws/src/server.ts b/node_modules/it-ws/src/server.ts
index 0bf164b..6ebbedb 100644
--- a/node_modules/it-ws/src/server.ts
+++ b/node_modules/it-ws/src/server.ts
@@ -24,7 +24,7 @@ class Server extends EventEmitter {
   private readonly server: http.Server | https.Server
   private readonly wsServer: WSServer
 
-  constructor (server: http.Server | https.Server, opts?: ServerOptions) {
+  constructor(server: http.Server | https.Server, opts?: ServerOptions) {
     super()
     opts = opts ?? {}
     this.server = server
@@ -36,7 +36,7 @@ class Server extends EventEmitter {
     this.wsServer.on('connection', this.onWsServerConnection.bind(this))
   }
 
-  async listen (addrInfo: { port: number } | number): Promise<WebSocketServer> {
+  async listen(addrInfo: { port: number } | number): Promise<WebSocketServer> {
     return new Promise<WebSocketServer>((resolve, reject) => {
       this.wsServer.once('error', (e) => { reject(e) })
       this.wsServer.once('listening', () => { resolve(this) })
@@ -44,7 +44,7 @@ class Server extends EventEmitter {
     })
   }
 
-  async close (): Promise<void> {
+  async close(): Promise<void> {
     await new Promise<void>((resolve, reject) => {
       this.server.close((err) => {
         if (err != null) {
@@ -56,13 +56,18 @@ class Server extends EventEmitter {
     })
   }
 
-  address (): string | AddressInfo | null {
+  address(): string | AddressInfo | null {
     return this.server.address()
   }
 
-  onWsServerConnection (socket: WebSocket, req: http.IncomingMessage): void {
+  onWsServerConnection(socket: WebSocket, req: http.IncomingMessage): void {
     const addr = this.wsServer.address()
 
+    if (!addr) {
+      this.emit('error', new Error('Server is not listening'))
+      return
+    }
+
     if (typeof addr === 'string') {
       this.emit('error', new Error('Cannot listen on unix sockets'))
       return
@@ -86,7 +91,7 @@ class Server extends EventEmitter {
   }
 }
 
-export function createServer (opts?: ServerOptions): WebSocketServer {
+export function createServer(opts?: ServerOptions): WebSocketServer {
   opts = opts ?? {}
 
   const server = opts.server ?? (opts.key != null && opts.cert != null ? https.createServer(opts) : http.createServer())
@@ -96,7 +101,7 @@ export function createServer (opts?: ServerOptions): WebSocketServer {
     wss.on('connection', opts.onConnection)
   }
 
-  function proxy (server: http.Server, event: string): http.Server {
+  function proxy(server: http.Server, event: string): http.Server {
     return server.on(event, (...args: any[]) => {
       wss.emit(event, ...args)
     })
